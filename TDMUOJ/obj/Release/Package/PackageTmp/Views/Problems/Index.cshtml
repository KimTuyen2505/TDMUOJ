@model dynamic
@{
    ViewBag.Title = "Danh sách bài tập";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/Content/css/Problems.css" />

<div class="problems-container">
    <div class="content-left">
        <div class="page-header">
            <h1 class="page-title">Danh sách bài tập</h1>
            <div class="search-container">
                <input type="text"
                       placeholder="Tìm kiếm đề bài..."
                       oninput="problemSearch()"
                       id="search"
                       class="search-input" />
                <span class="search-icon"></span>
            </div>
        </div>

        <div class="problems-table-container">
            <table class="problems-table">
                <thead>
                    <tr class="table-header">
                        <th class="column-id">ID</th>
                        <th class="column-title">Tên bài tập</th>
                        <th class="column-difficulty">Độ khó</th>
                        <th class="column-solved">Số người giải</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.problems)
                    {
                        <tr class="table-row">
                            <td class="column-id">
                                <a href="@Url.Action("DetailProblem", "Problems", new {id = item.id})" class="problem-link">@item.id</a>
                            </td>
                            <td class="column-title">
                                <a href="@Url.Action("DetailProblem", "Problems", new {id = item.id})" class="problem-link">@item.title</a>
                            </td>
                            <td class="column-difficulty">
                                <span class="difficulty-badge @GetDifficultyClass(item.difficulty)">@item.difficulty</span>
                            </td>
                            <td class="column-solved">
                                <span class="solved-count">@item.numberOfAccepted</span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="pagination">
                <button class="pagination-button prev-button" onclick="getDataTablePrev()">
                    <span class="pagination-icon">&#10094;</span>
                </button>

                <div class="pagination-numbers">
                    @for (var i = 1; i <= (Model.problems.Count + 11) / 12; i++)
                    {
                        <button class="pagination-button page-number @(i == 1 ? "active" : "")" onclick="getDataTable(@i)">@i</button>
                    }
                </div>

                <button class="pagination-button next-button" onclick="getDataTableNext()">
                    <span class="pagination-icon">&#10095;</span>
                </button>
            </div>
        </div>
    </div>

    <div class="content-right">
        <div class="sidebar-widget top-users-widget">
            <h2 class="widget-title">Top thành viên</h2>

            <div class="widget-content">
                <table class="top-users-table">
                    <thead>
                        <tr class="top-users-header">
                            <th class="top-user-rank">#</th>
                            <th class="top-user-name">Tên truy cập</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.topUsers.AccountList.Count; i++)
                        {
                            <tr class="top-user-item">
                                <td class="top-user-rank">@(i+1)</td>
                                <td class="top-user-name">
                                    <a href="@Url.Action("Index", "Profile", new {id = Model.topUsers.AccountList[i].id})" class="user-link">
                                        @Model.topUsers.AccountList[i].username
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="sidebar-widget new-problems-widget">
            <h2 class="widget-title">Bài tập mới</h2>

            <div class="widget-content">
                <ul class="new-problems-list">
                    @foreach (var item in Model.topUsers.NewProblemList)
                    {
                        <li class="new-problem-item">
                            <a href="@Url.Action("DetailProblem", "Problems", new {id = item.id})" class="problem-link">
                                @item.title
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetDifficultyClass(string difficulty)
    {
        switch (difficulty.ToLower())
        {
            case "dễ":
                return "easy";
            case "trung bình":
                return "medium";
            case "khó":
                return "hard";
            case "rất khó":
                return "very-hard";
            default:
                return "";
        }
    }
}

<script>
    var listProblem = document.querySelectorAll('.problems-table tbody tr');
    const getChildPage = document.getElementsByClassName("page-number");
    const numberPage = Math.ceil(listProblem.length / 12);
    var index = 1;

    // Initialize: show first page
    showPage(1);

    function showPage(pageNumber) {
        // Hide all rows
        listProblem.forEach(function (row) {
            row.style.display = 'none';
        });

        // Show rows for current page
        for (var i = (pageNumber - 1) * 12; i < Math.min(listProblem.length, pageNumber * 12); i++) {
            listProblem[i].style.display = 'table-row';
        }

        // Update active page button
        for (var i = 0; i < getChildPage.length; i++) {
            getChildPage[i].classList.remove("active");
        }
        getChildPage[pageNumber - 1].classList.add("active");
    }

    function getDataTable(pageNumber) {
        index = pageNumber;
        showPage(pageNumber);
    }

    function getDataTablePrev() {
        if (index > 1) {
            index--;
            showPage(index);
        }
    }

    function getDataTableNext() {
        if (index < numberPage) {
            index++;
            showPage(index);
        }
    }

    function problemSearch() {
        var searchInput = document.getElementById("search");
        var searchTerm = searchInput.value.toLowerCase();

        // Reset to first page
        index = 1;

        // Update active page button
        for (var i = 0; i < getChildPage.length; i++) {
            getChildPage[i].classList.remove("active");
        }
        getChildPage[0].classList.add("active");

        // If search is empty, show first page
        if (searchTerm === "") {
            showPage(1);
            return;
        }

        // Hide all rows
        listProblem.forEach(function (row) {
            row.style.display = 'none';
        });

        // Show matching rows
        var visibleCount = 0;
        listProblem.forEach(function (row) {
            var idElement = row.querySelector(".column-id a");
            var titleElement = row.querySelector(".column-title a");

            var id = idElement.textContent.toLowerCase();
            var title = titleElement.textContent.toLowerCase();

            if (id.includes(searchTerm) || title.includes(searchTerm)) {
                row.style.display = 'table-row';
                visibleCount++;
            }
        });
    }
</script>