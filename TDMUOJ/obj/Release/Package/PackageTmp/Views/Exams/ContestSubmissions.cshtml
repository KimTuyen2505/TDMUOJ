@model TDMUOJ.Models.ContestSubmissionsViewModel
@{
    ViewBag.Title = "Bài nộp - " + Model.Contest.title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/Content/css/ContestSubmissions.css" />

<div class="contest-submissions-container">
    <div class="contest-info-bar">
        <div class="contest-info">
            <h3 class="contest-title">
                <a href="@Url.Action("DetailExam", new { id = Model.ContestId })">@Model.Contest.title</a>
            </h3>
            <div class="contest-time-info">
                @if (Model.Contest.endTime > DateTime.Now)
                {
                    <div class="time-remain" data-endtime="@Model.Contest.endTime.ToString("yyyy-MM-dd HH:mm:ss")">
                        <span class="time-label">Còn lại:</span>
                        <span class="time-value time-down"></span>
                    </div>
                }
                else
                {
                    <div class="time-info">
                        <span class="time-label">Kỳ thi đã kết thúc</span>
                    </div>
                }
            </div>
        </div>
        <div class="contest-actions">
            <a href="@Url.Action("DetailExam", new { id = Model.Contest.id })" class="action-btn problems-btn">Bài tập</a>
            <a href="@Url.Action("ContestLeaderboard", new { id = Model.Contest.id })" class="action-btn leaderboard-btn">Bảng xếp hạng</a>
        </div>
    </div>

    <div class="submissions-header">
        <h1 class="submissions-title">Danh sách bài nộp</h1>
    </div>

    <div class="submissions-table-container">
        <table class="submissions-table">
            <thead>
                <tr>
                    <th class="column-status">Trạng thái</th>
                    <th class="column-info">Thông tin</th>
                    <th class="column-performance">Hiệu suất</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var submission in Model.Submissions)
                {
                    <tr class="submission-row">
                        <td class="column-status">
                            <div class="status-badge @GetStatusClass(submission.Result)">
                                <span class="status-text">@submission.Result</span>
                            </div>
                            <div class="score-text">
                                <span class="score-value">@submission.TestCaseAchieved / @submission.TestCaseTotal</span>
                            </div>
                            <div class="language-badge">
                                <span>@submission.Language</span>
                            </div>
                        </td>
                        <td class="column-info">
                            <div class="problem-info">
                                <a href="@Url.Action("ContestProblem", new { id = submission.ProblemId, contestId = Model.Contest.id })" class="problem-link">
                                    @submission.ProblemName
                                </a>
                            </div>
                            <div class="submission-meta">
                                <a href="@Url.Action("Index", "Profile", new { id = submission.UserId })" class="user-link">
                                    @submission.Username
                                </a>
                                <span class="submission-time">
                                    @submission.SubmittedAt.Value.ToString("HH:mm:ss dd/MM/yyyy")
                                </span>
                            </div>
                        </td>
                        <td class="column-performance">
                            <div class="performance-metrics">
                                <div class="metric time-metric">
                                    <span class="metric-icon time-icon"></span>
                                    <span class="metric-value">@submission.MaxTime ms</span>
                                </div>
                                <div class="metric memory-metric">
                                    <span class="metric-icon memory-icon"></span>
                                    <span class="metric-value">@submission.MaxMemory KB</span>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Lấy tất cả các phần tử countdown
    const timeRemainElements = document.querySelectorAll(".time-remain");

    // Hàm cập nhật countdown
    function updateCountdown() {
        timeRemainElements.forEach(element => {
            const endTime = new Date(element.getAttribute("data-endtime")).getTime();
            const now = new Date().getTime();
            const distance = endTime - now;
            const countdownElement = element.querySelector(".time-down");

            if (distance > 0) {
                const days = Math.floor(distance / (1000 * 60 * 60 * 24));
                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                const unit = ["ngày", "giờ", "phút", "giây"];
                const value = [days, hours, minutes, seconds];
                const id = (days > 0 ? 0 : hours > 0 ? 1 : minutes > 0 ? 2 : 3);

                let time = "";
                for (let i = id; i < 4; i++) {
                    time = `${time} ${value[i]} ${unit[i]}`;
                }

                countdownElement.innerText = time.trim();

                // Thêm hiệu ứng nhấp nháy cho countdown sắp hết giờ (dưới 5 phút)
                if (distance < 5 * 60 * 1000) {
                    countdownElement.classList.add("urgent");
                } else {
                    countdownElement.classList.remove("urgent");
                }
            } else {
                countdownElement.innerText = "Hết giờ!";

                // Tự động làm mới trang sau 3 giây khi hết giờ
                setTimeout(() => {
                    window.location.reload();
                }, 3000);
            }
        });
    }

    // Cập nhật mỗi giây
    setInterval(updateCountdown, 1000);

    // Khởi chạy ngay khi tải trang
    updateCountdown();
</script>

@functions {
    public string GetStatusClass(string status)
    {
        switch (status.ToUpper())
        {
            case "AC":
            case "ACCEPTED":
                return "status-accepted";
            case "WA":
            case "WRONG ANSWER":
                return "status-wrong-answer";
            case "TLE":
            case "TIME LIMIT EXCEEDED":
                return "status-time-limit";
            case "MLE":
            case "MEMORY LIMIT EXCEEDED":
                return "status-memory-limit";
            case "RTE":
            case "RUNTIME ERROR":
                return "status-runtime-error";
            case "CE":
            case "COMPILATION ERROR":
                return "status-compilation-error";
            case "PE":
            case "PRESENTATION ERROR":
                return "status-presentation-error";
            case "PENDING":
                return "status-pending";
            case "RUNNING":
                return "status-running";
            default:
                return "status-unknown";
        }
    }
}