@model List<TDMUOJ.Models.SubmissionManagementCustom>

<div id="submissions" class="dashboard-item hidden">
    <div class="flex items-center justify-between mb-4">
        <h2>Quản lý bài nộp</h2>
        <div class="search-container">
            <input type="text" id="submissionSearch" class="form-control" placeholder="Tìm kiếm bài nộp..." />
            <i class="fas fa-search search-icon"></i>
        </div>
    </div>

    <div class="filter-bar mb-4">
        <div class="filter-group">
            <label for="statusFilter">Trạng thái:</label>
            <select id="statusFilter" class="form-control">
                <option value="">Tất cả</option>
                <option value="AC">Accepted</option>
                <option value="WA">Wrong Answer</option>
                <option value="TLE">Time Limit Exceeded</option>
                <option value="MLE">Memory Limit Exceeded</option>
                <option value="CE">Compilation Error</option>
                <option value="RE">Runtime Error</option>
            </select>
        </div>
        <div class="filter-group">
            <label for="languageFilter">Ngôn ngữ:</label>
            <select id="languageFilter" class="form-control">
                <option value="">Tất cả</option>
                <option value="C">C</option>
                <option value="C++">C++</option>
                <option value="Java">Java</option>
                <option value="Python">Python</option>
                <option value="JavaScript">JavaScript</option>
            </select>
        </div>
    </div>

    <div class="table-responsive">
        <table class="admin-table" id="submissionsTable">
            <thead>
                <tr>
                    <th width="5%">STT</th>
                    <th width="15%">Người nộp</th>
                    <th width="25%">Bài tập</th>
                    <th width="10%">Ngôn ngữ</th>
                    <th width="15%">Thời gian nộp</th>
                    <th width="15%">Kết quả</th>
                    <th width="15%">Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < Model.Count; i++)
                {
                    var submission = Model[i];
                    var statusClass = GetStatusClass(submission.status);
                    var languageIcon = GetLanguageIcon(submission.language);

                    <tr data-status="@submission.status" data-language="@submission.language">
                        <td>@(i+1)</td>
                        <td>
                            <div class="user-info">
                                <span class="user-name">@submission.username</span>
                            </div>
                        </td>
                        <td>
                            <div class="problem-info">
                                <span class="problem-title">@submission.problemTitle</span>
                            </div>
                        </td>
                        <td>
                            <span class="language-badge">
                                <i class="@languageIcon language-icon"></i>
                                @submission.language
                            </span>
                        </td>
                        <td>
                            <div class="submission-time">
                                <i class="fas fa-clock mr-1"></i>
                                @(submission.createdAt?.ToString("dd/MM/yyyy HH:mm") ?? "Không xác định")
                            </div>
                        </td>
                        <td>
                            <span class="status-badge status-@statusClass">@submission.status</span>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-primary"
                                        data-id="@submission.id"
                                        data-username="@submission.username"
                                        data-problemtitle="@submission.problemTitle"
                                        data-language="@submission.language"
                                        data-time="@(submission.createdAt?.ToString("dd/MM/yyyy HH:mm") ?? "Không xác định")"
                                        data-status="@submission.status"
                                        data-code="@Html.Raw(HttpUtility.HtmlAttributeEncode(submission.code))"
                                        onclick="showSubmissionDetailsFromData(this)">
                                    <i class="fas fa-eye btn-icon"></i>Chi tiết
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal Submission Details -->
<div id="submissionDetailsModal" class="modal">
    <div class="modal-content submission-modal">
        <div class="modal-header">
            <h3 class="modal-title"><i class="fas fa-code mr-2"></i>Chi tiết bài nộp</h3>
            <button type="button" class="close">&times;</button>
        </div>

        <div class="submission-details">
            <div class="submission-info-grid">
                <div class="submission-info-item">
                    <span class="info-label">Người nộp:</span>
                    <span id="submissionUser" class="info-value"></span>
                </div>
                <div class="submission-info-item">
                    <span class="info-label">Bài tập:</span>
                    <span id="submissionProblem" class="info-value"></span>
                </div>
                <div class="submission-info-item">
                    <span class="info-label">Ngôn ngữ:</span>
                    <span id="submissionLanguage" class="info-value"></span>
                </div>
                <div class="submission-info-item">
                    <span class="info-label">Thời gian nộp:</span>
                    <span id="submissionTime" class="info-value"></span>
                </div>
                <div class="submission-info-item">
                    <span class="info-label">Kết quả:</span>
                    <span id="submissionStatus" class="info-value"></span>
                </div>
            </div>

            <div class="code-container">
                <div class="code-header">
                    <h4>Mã nguồn</h4>
                    <button id="copyCodeBtn" class="btn btn-secondary">
                        <i class="fas fa-copy btn-icon"></i>Sao chép
                    </button>
                </div>
                <pre id="submissionCode" class="code-block"><code></code></pre>
            </div>
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-secondary close-modal">
                <i class="fas fa-times btn-icon"></i>Đóng
            </button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById("submissionDetailsModal");
        const closeButtons = document.querySelectorAll("#submissionDetailsModal .close, #submissionDetailsModal .close-modal");
        const searchInput = document.getElementById("submissionSearch");
        const statusFilter = document.getElementById("statusFilter");
        const languageFilter = document.getElementById("languageFilter");
        const copyCodeBtn = document.getElementById("copyCodeBtn");

        // Close modal when clicking close buttons
        closeButtons.forEach(button => {
            button.addEventListener('click', function() {
                modal.style.display = "none";
            });
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        });

        // Search functionality
        searchInput.addEventListener('keyup', filterSubmissions);
        statusFilter.addEventListener('change', filterSubmissions);
        languageFilter.addEventListener('change', filterSubmissions);

        function filterSubmissions() {
            const searchValue = searchInput.value.toLowerCase();
            const statusValue = statusFilter.value;
            const languageValue = languageFilter.value;
            const rows = document.querySelectorAll("#submissionsTable tbody tr");

            rows.forEach(row => {
                const username = row.querySelector(".user-name").textContent.toLowerCase();
                const problemTitle = row.querySelector(".problem-title").textContent.toLowerCase();
                const status = row.getAttribute("data-status");
                const language = row.getAttribute("data-language");

                const matchesSearch = username.includes(searchValue) || problemTitle.includes(searchValue);
                const matchesStatus = statusValue === "" || status === statusValue;
                const matchesLanguage = languageValue === "" || language === languageValue;

                if (matchesSearch && matchesStatus && matchesLanguage) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        }

        // Copy code functionality
        copyCodeBtn.addEventListener('click', function() {
            const codeElement = document.querySelector("#submissionCode code");
            const textArea = document.createElement('textarea');
            textArea.value = codeElement.textContent;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);

            // Show copied notification
            showNotification('Mã nguồn đã được sao chép!', 'success');
        });
    });

    function showSubmissionDetailsFromData(btn) {
        var id = btn.getAttribute("data-id");
        var username = btn.getAttribute("data-username");
        var problemTitle = btn.getAttribute("data-problemtitle");
        var language = btn.getAttribute("data-language");
        var time = btn.getAttribute("data-time");
        var status = btn.getAttribute("data-status");
        // Lấy code từ data-code; vì đã được encode theo attribute, nên khi sử dụng có thể cần decode lại nếu cần
        var code = btn.getAttribute("data-code");

        // Gọi hàm hiển thị chi tiết
        showSubmissionDetails(id, username, problemTitle, language, time, status, code);
    }
    // Show submission details in modal
    function showSubmissionDetails(id, username, problemTitle, language, time, status, code) {
        const modal = document.getElementById("submissionDetailsModal");
        const statusClass = getStatusClassForJS(status);

        document.getElementById("submissionUser").textContent = username;
        document.getElementById("submissionProblem").textContent = problemTitle;
        document.getElementById("submissionLanguage").textContent = language;
        document.getElementById("submissionTime").textContent = time;

        const statusElement = document.getElementById("submissionStatus");
        statusElement.textContent = status;
        statusElement.className = "info-value status-badge status-" + statusClass;

        const codeElement = document.querySelector("#submissionCode code");
        codeElement.textContent = decodeURIComponent(code);

        // Apply syntax highlighting if available
        if (typeof hljs !== 'undefined') {
            hljs.highlightElement(codeElement);
        }

        modal.style.display = "block";
    }

    // Get status class for JavaScript
    function getStatusClassForJS(status) {
        switch (status) {
            case "Accepted":
                return "accepted";
            case "Wrong Answer":
                return "wrong";
            case "Time Limit Exceeded":
                return "tle";
            case "Memory Limit Exceeded":
                return "mle";
            case "Compilation Error":
                return "ce";
            case "Runtime Error":
                return "re";
            default:
                return "pending";
        }
    }
</script>

@functions {
    string GetStatusClass(string status)
    {
        switch (status)
        {
            case "Accepted":
                return "accepted";
            case "Wrong Answer":
                return "wrong";
            case "Time Limit Exceeded":
                return "tle";
            case "Memory Limit Exceeded":
                return "mle";
            case "Compilation Error":
                return "ce";
            case "Runtime Error":
                return "re";
            default:
                return "pending";
        }
    }

    string GetLanguageIcon(string language)
    {
        switch (language)
        {
            case "C":
                return "fas fa-copyright";
            case "C++":
                return "fas fa-copyright";
            case "Java":
                return "fab fa-java";
            case "Python":
                return "fab fa-python";
            case "JavaScript":
                return "fab fa-js";
            default:
                return "fas fa-code";
        }
    }
}

